package com.dev.tagashira.entity;

import com.dev.tagashira.constant.FeeTypeEnum;
import jakarta.persistence.*;
import lombok.*;
import lombok.experimental.FieldDefaults;

import java.math.BigDecimal;
import java.time.LocalDate;

@Entity
@Table(name = "floor_area_fee_configs")
@Getter
@Setter
@Builder
@AllArgsConstructor
@NoArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE)
public class FloorAreaFeeConfig {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    Long id;
    
    @Column(nullable = false, length = 255)
    String feeName; // Tên loại phí: "Phí quản lý", "Phí bảo trì", etc.
    
    @Column(nullable = false, length = 500)
    String description; // Mô tả chi tiết về loại phí
    
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    FeeTypeEnum feeTypeEnum; // Loại phí chung (FLOOR_AREA, MANAGEMENT_FEE, etc.)
    
    @Column(nullable = false, precision = 15, scale = 2)
    BigDecimal unitPricePerSqm; // Giá theo m² (VNĐ/m²)
    
    @Builder.Default
    @Column(nullable = false)
    Boolean isActive = true; // Có đang áp dụng không
    
    @Builder.Default
    @Column(nullable = false)
    Boolean isAutoGenerated = false; // Có tự động tạo hàng tháng không
    
    // Thời gian hiệu lực
    LocalDate effectiveFrom;
    LocalDate effectiveTo;
    
    // Cấu hình auto generation
    @Column(nullable = true)
    Integer scheduledDay; // Ngày trong tháng tạo tự động (1-31), null = không tự động
    
    @Column(nullable = true)
    Integer scheduledHour; // Giờ tạo tự động (0-23)
    
    @Column(nullable = true)
    Integer scheduledMinute; // Phút tạo tự động (0-59)
    
    LocalDate createdAt;
    LocalDate updatedAt;
    
    @PrePersist
    public void beforeCreate() {
        this.createdAt = LocalDate.now();
    }
    
    @PreUpdate
    public void beforeUpdate() {
        this.updatedAt = LocalDate.now();
    }

    /**
     * Get cron expression for scheduled generation
     */
    public String getCronExpression() {
        if (scheduledDay == null || scheduledHour == null || scheduledMinute == null) {
            return null;
        }
        // Format: "0 {minute} {hour} {day} * ?" - runs monthly
        return String.format("0 %d %d %d * ?", scheduledMinute, scheduledHour, scheduledDay);
    }
    
    /**
     * Check if this config is ready for auto generation
     */
    public boolean isReadyForAutoGeneration() {
        return isActive && isAutoGenerated && 
               scheduledDay != null && scheduledHour != null && scheduledMinute != null &&
               unitPricePerSqm != null && unitPricePerSqm.compareTo(BigDecimal.ZERO) > 0;
    }
    
    /**
     * Check if this config is currently effective
     */
    public boolean isCurrentlyEffective() {
        LocalDate now = LocalDate.now();
        
        boolean afterStart = effectiveFrom == null || !now.isBefore(effectiveFrom);
        boolean beforeEnd = effectiveTo == null || !now.isAfter(effectiveTo);
        
        return isActive && afterStart && beforeEnd;
    }
} 