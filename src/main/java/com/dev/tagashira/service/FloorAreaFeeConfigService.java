package com.dev.tagashira.service;

import com.dev.tagashira.entity.FloorAreaFeeConfig;
import com.dev.tagashira.constant.FeeTypeEnum;
import com.dev.tagashira.repository.FloorAreaFeeConfigRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
@Slf4j
public class FloorAreaFeeConfigService {
    
    private final FloorAreaFeeConfigRepository configRepository;
    
    /**
     * Get all active floor area fee configs
     */
    public List<FloorAreaFeeConfig> getAllActiveConfigs() {
        return configRepository.findByIsActiveTrueOrderByFeeNameAsc();
    }
    
    /**
     * Get all configs ready for auto generation
     */
    public List<FloorAreaFeeConfig> getAutoGenerationConfigs() {
        return configRepository.findByIsActiveTrueAndIsAutoGeneratedTrueOrderByScheduledDayAscScheduledHourAscScheduledMinuteAsc();
    }
    
    /**
     * Get currently effective configs (within date range and active)
     */
    public List<FloorAreaFeeConfig> getCurrentlyEffectiveConfigs() {
        return configRepository.findCurrentlyEffectiveConfigs(LocalDate.now());
    }
    
    /**
     * Get configs by fee type
     */
    public List<FloorAreaFeeConfig> getConfigsByFeeType(FeeTypeEnum feeType) {
        return configRepository.findByFeeTypeEnumAndIsActiveTrueOrderByFeeNameAsc(feeType);
    }
    
    /**
     * Find config by ID
     */
    public Optional<FloorAreaFeeConfig> findById(Long id) {
        return configRepository.findById(id);
    }
    
    /**
     * Find config by fee name
     */
    public Optional<FloorAreaFeeConfig> findByFeeName(String feeName) {
        return configRepository.findByFeeNameAndIsActiveTrue(feeName);
    }
    
    /**
     * Create new floor area fee config
     */
    @Transactional
    public FloorAreaFeeConfig createConfig(FloorAreaFeeConfig config) {
        // Validate fee name uniqueness
        if (configRepository.existsByFeeNameAndIsActiveTrue(config.getFeeName())) {
            throw new IllegalArgumentException("Fee name '" + config.getFeeName() + "' already exists");
        }
        
        // Set default values if not provided
        if (config.getIsActive() == null) {
            config.setIsActive(true);
        }
        if (config.getIsAutoGenerated() == null) {
            config.setIsAutoGenerated(false);
        }
        if (config.getEffectiveFrom() == null) {
            config.setEffectiveFrom(LocalDate.now());
        }
        
        FloorAreaFeeConfig savedConfig = configRepository.save(config);
        log.info("Created new floor area fee config: {} with unit price: {} VNĐ/m²", 
                savedConfig.getFeeName(), savedConfig.getUnitPricePerSqm());
        
        return savedConfig;
    }
    
    /**
     * Update existing floor area fee config
     */
    @Transactional
    public FloorAreaFeeConfig updateConfig(Long id, FloorAreaFeeConfig updatedConfig) {
        FloorAreaFeeConfig existingConfig = configRepository.findById(id)
            .orElseThrow(() -> new IllegalArgumentException("Config not found with ID: " + id));
        
        // Check fee name uniqueness if name is being changed
        if (!existingConfig.getFeeName().equals(updatedConfig.getFeeName()) &&
            configRepository.existsByFeeNameAndIsActiveTrue(updatedConfig.getFeeName())) {
            throw new IllegalArgumentException("Fee name '" + updatedConfig.getFeeName() + "' already exists");
        }
        
        // Update fields
        existingConfig.setFeeName(updatedConfig.getFeeName());
        existingConfig.setDescription(updatedConfig.getDescription());
        existingConfig.setFeeTypeEnum(updatedConfig.getFeeTypeEnum());
        existingConfig.setUnitPricePerSqm(updatedConfig.getUnitPricePerSqm());
        existingConfig.setIsActive(updatedConfig.getIsActive());
        existingConfig.setIsAutoGenerated(updatedConfig.getIsAutoGenerated());
        existingConfig.setEffectiveFrom(updatedConfig.getEffectiveFrom());
        existingConfig.setEffectiveTo(updatedConfig.getEffectiveTo());
        existingConfig.setScheduledDay(updatedConfig.getScheduledDay());
        existingConfig.setScheduledHour(updatedConfig.getScheduledHour());
        existingConfig.setScheduledMinute(updatedConfig.getScheduledMinute());
        
        FloorAreaFeeConfig savedConfig = configRepository.save(existingConfig);
        log.info("Updated floor area fee config: {} with unit price: {} VNĐ/m²", 
                savedConfig.getFeeName(), savedConfig.getUnitPricePerSqm());
        
        return savedConfig;
    }
    
    /**
     * Deactivate config (soft delete)
     */
    @Transactional
    public void deactivateConfig(Long id) {
        FloorAreaFeeConfig config = configRepository.findById(id)
            .orElseThrow(() -> new IllegalArgumentException("Config not found with ID: " + id));
        
        config.setIsActive(false);
        config.setEffectiveTo(LocalDate.now());
        
        configRepository.save(config);
        log.info("Deactivated floor area fee config: {}", config.getFeeName());
    }
    
    /**
     * Delete config permanently
     */
    @Transactional
    public void deleteConfig(Long id) {
        if (!configRepository.existsById(id)) {
            throw new IllegalArgumentException("Config not found with ID: " + id);
        }
        
        configRepository.deleteById(id);
        log.info("Permanently deleted floor area fee config with ID: {}", id);
    }
    
    /**
     * Get configs scheduled for specific time
     */
    public List<FloorAreaFeeConfig> getConfigsScheduledAt(Integer day, Integer hour, Integer minute) {
        return configRepository.findBySchedule(day, hour, minute);
    }
    
    /**
     * Initialize default configs if none exist
     */
    @Transactional
    public void initializeDefaultConfigs() {
        if (configRepository.count() == 0) {
            log.info("No floor area fee configs found. Initializing default configurations...");
            
            // Default management fee config (using FLOOR_AREA type)
            FloorAreaFeeConfig managementFee = FloorAreaFeeConfig.builder()
                .feeName("Phí quản lý")
                .description("Phí quản lý chung cư hàng tháng theo diện tích")
                .feeTypeEnum(FeeTypeEnum.FLOOR_AREA)
                .unitPricePerSqm(new java.math.BigDecimal("15000"))
                .isActive(true)
                .isAutoGenerated(true)
                .scheduledDay(1)
                .scheduledHour(2)
                .scheduledMinute(0)
                .effectiveFrom(LocalDate.now())
                .build();
            
            // Default maintenance fee config (using FLOOR_AREA type)
            FloorAreaFeeConfig maintenanceFee = FloorAreaFeeConfig.builder()
                .feeName("Phí bảo trì")
                .description("Phí bảo trì hệ thống và thiết bị chung cư theo diện tích")
                .feeTypeEnum(FeeTypeEnum.FLOOR_AREA)
                .unitPricePerSqm(new java.math.BigDecimal("8000"))
                .isActive(true)
                .isAutoGenerated(true)
                .scheduledDay(1)
                .scheduledHour(2)
                .scheduledMinute(15)
                .effectiveFrom(LocalDate.now())
                .build();
            
            // Default cleaning fee config (using FLOOR_AREA type)
            FloorAreaFeeConfig cleaningFee = FloorAreaFeeConfig.builder()
                .feeName("Phí vệ sinh")
                .description("Phí vệ sinh khu vực chung theo diện tích")
                .feeTypeEnum(FeeTypeEnum.FLOOR_AREA)
                .unitPricePerSqm(new java.math.BigDecimal("5000"))
                .isActive(true)
                .isAutoGenerated(true)
                .scheduledDay(1)
                .scheduledHour(2)
                .scheduledMinute(30)
                .effectiveFrom(LocalDate.now())
                .build();
            
            // Default security fee config (using FLOOR_AREA type)
            FloorAreaFeeConfig securityFee = FloorAreaFeeConfig.builder()
                .feeName("Phí bảo vệ")
                .description("Phí dịch vụ bảo vệ 24/7 theo diện tích")
                .feeTypeEnum(FeeTypeEnum.FLOOR_AREA)
                .unitPricePerSqm(new java.math.BigDecimal("3000"))
                .isActive(true)
                .isAutoGenerated(true)
                .scheduledDay(1)
                .scheduledHour(2)
                .scheduledMinute(45)
                .effectiveFrom(LocalDate.now())
                .build();
            
            // Default utility fee config (manual generation)
            FloorAreaFeeConfig utilityFee = FloorAreaFeeConfig.builder()
                .feeName("Phí tiện ích")
                .description("Phí tiện ích chung (điện, nước khu vực chung) theo diện tích")
                .feeTypeEnum(FeeTypeEnum.FLOOR_AREA)
                .unitPricePerSqm(new java.math.BigDecimal("2000"))
                .isActive(true)
                .isAutoGenerated(false) // Manual generation only
                .effectiveFrom(LocalDate.now())
                .build();
            
            configRepository.saveAll(List.of(managementFee, maintenanceFee, cleaningFee, securityFee, utilityFee));
            log.info("Initialized 5 default floor area fee configs (all using FLOOR_AREA type)");
        }
    }
} 